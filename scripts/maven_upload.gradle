apply plugin: 'maven'
apply plugin: 'signing'
configurations {
    deployerJars

}


//生成task的组名称
if(!ext.hasProperty("taskGroup") || ext.getProperty("taskGroup") == null ){
    project.ext.setProperty("taskGroup","tvkit lib")
}

String exe(String s){
    return s.execute([],project.rootDir).text.trim()
}

Properties loadProperties(File file){
    FileInputStream inputStream = new FileInputStream(file)
    java.util.Properties p = new Properties()
    p.load(inputStream)
    return p
}

class MavenPush{



    String snapshotUrl="unDefine"
    String mavenLocal="unDefine"
    String snapshot="unDefine"
    String mavenVersion="unDefine"
    String releaseUrl="unDefine"
    String mavenArtifactId="unDefine"
    String mavenGroupId="unDefine"
    String repositoryUrl="unDefine"
    String versionExtraNumber="unDefine"
    def isRelease="true"
    def MAVEN_NAME
    def MAVEN_PASSWORD
    def DOC_URL


    Project project
    File propertyFile
    File cachePropertyFile

    MavenPush(Project project) {
        this.project = project
        this.propertyFile = project.file('upload_config.properties')
        this.cachePropertyFile = project.file('.cache.properties')
    }

    String exe(String s){
        return s.execute([],project.rootDir).text.trim()
    }

    Properties loadProperties(File file){
        FileInputStream inputStream = new FileInputStream(file)
        java.util.Properties p = new Properties()
        p.load(inputStream)
        return p
    }

    def savePropertiesFile(Properties p,File file){

        FileOutputStream outputStream = new FileOutputStream(file,false)

        StringBuilder sb = new StringBuilder()
        sb.append("Aoto generated by mavenGenerateProperties task")
        //TODO 添加注释

        p.store(outputStream,sb.toString())

    }




    void parseUploadConfig(){
        this.parseUploadConfig(propertyFile)
    }

    void parseUploadConfig(File file){
        final maven_push = file
        if(cachePropertyFile == null && !cachePropertyFile.exists()){
            throw new RuntimeException("parseUploadConfig cachePropertyFile is null")
        }
        if(maven_push != null && maven_push.exists()) {
            Properties mavenProperties = new Properties()
            InputStream mavenPropertiesFileStream = maven_push.newDataInputStream()
            mavenProperties.load(mavenPropertiesFileStream)

            Properties cacheProperties = loadProperties(cachePropertyFile)


            snapshotUrl = mavenProperties.getProperty("snapshotUrl")
            mavenLocal = cacheProperties.getProperty("mavenLocal")
            snapshot = cacheProperties.getProperty("snapshot")
            versionExtraNumber = cacheProperties.getProperty("versionExtraNumber")
            mavenVersion = mavenProperties.getProperty("mavenVersion")
            releaseUrl = mavenProperties.getProperty("releaseUrl")
            mavenArtifactId = mavenProperties.getProperty("mavenArtifactId")
            mavenGroupId = mavenProperties.getProperty("mavenGroupId")



//判断版本是Release or Snapshots
            isRelease = !(snapshot == "true")

//获取仓库url

            repositoryUrl = isRelease ? releaseUrl : snapshotUrl
            repositoryUrl = mavenLocal == "true" ? 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath : repositoryUrl
//            repositoryUrl =  'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

            if (!project.hasProperty("MAVEN_NAME") || !project.hasProperty("MAVEN_PASSWORD")) {
                //读取maven账号和密码，存放在本地的local.properties里，需要指定MAVEN_NAME和MAVEN_PASSWORD
                Properties localProperties = new Properties()
                InputStream localFileStream = project.rootProject.file('local.properties').newDataInputStream()
                localProperties.load(localFileStream)
                MAVEN_NAME = localProperties.getProperty("MAVEN_NAME")
                MAVEN_PASSWORD = localProperties.getProperty("MAVEN_PASSWORD")
                if (!(mavenLocal == "true")) {
                    if (MAVEN_NAME == null || MAVEN_PASSWORD == null) {
                        println("没有设定maven上传所需的用户名称和密码，请在根目录的local.properties中配置MAVEN_NAME和MAVEN_PASSWORD")
                    }
                }
            }else{
                //如果配置这俩个参数，不需要从本地读取，此种情况可能是在线上打包时使用
                MAVEN_NAME = project.MAVEN_NAME
                MAVEN_PASSWORD = project.MAVEN_PASSWORD
                DOC_URL = project.DOC_URL
//                println("已配置上传账户MAVEN_NAME："+MAVEN_NAME+" DOC_URL:"+DOC_URL)
            }

//确定版本号
            def commitCount = exe('git rev-list HEAD --count')
            System.out.println("parseUploadConfig commitCount "+ commitCount)
            boolean isSnapshot = !isRelease
            if(mavenLocal == "true" && Integer.parseInt(versionExtraNumber) > 0){
                System.out.println("MavenLocal::::")
                mavenVersion = mavenVersion + "." + (versionExtraNumber)
            }else if(isSnapshot){
                def post = commitCount+''
                final String current = mavenVersion+".0"
                final int lastIndex = current.lastIndexOf('.') + 1
                final String prefix = current.substring(0,lastIndex)
                final String finalNumber = post
                final String result = prefix + finalNumber
                System.out.println("buildIncrementVersion currentVersion "+ current+" nextVersion:"+result)
                mavenVersion = result + "-SNAPSHOT"
            }

            //读取配置后，更新gradle.properties
            File gradleFile =  new File(project.projectDir,".cache.properties")
            if(!gradleFile.exists()){
                gradleFile.createNewFile()
                exe('git add '+gradleFile.absolutePath)
            }

            Properties gradleProperties = loadProperties(gradleFile)
            Properties mergedProperties = new Properties()
            println("upload_config.Properties is "+mavenProperties)
            gradleProperties.stringPropertyNames().each {
                mergedProperties.put(it,gradleProperties.get(it))
            }

            mergedProperties.setProperty("mavenGroupId",mavenGroupId)
            mergedProperties.setProperty("mavenArtifactId",mavenArtifactId)
            mergedProperties.setProperty("mavenVersion",mavenVersion)

            savePropertiesFile(mergedProperties,gradleFile)
            println("MavenPush entity:"+this)
//            println("maven_push完成配置：isRelease： "+isRelease+" 上传地址："+repositoryUrl+",上传文件名称:"+mavenArtifactId+",组名称："+mavenGroupId+",上传版本号："+mavenVersion)
        }else{
            println( "没有找到maven_push.properties，请执行task:mavenGenerateProperties生成配置文件")
        }
    }

    @Override
    public String toString() {
        return "MavenPush{" +
                ", mavenLocal='" + mavenLocal + '\'' +
                ", snapshot='" + snapshot + '\'' +
                ", mavenVersion='" + mavenVersion + '\'' +
                ", mavenArtifactId='" + mavenArtifactId + '\'' +
                ", mavenGroupId='" + mavenGroupId + '\'' +
                ", repositoryUrl='" + repositoryUrl + '\'' +
                ", isRelease=" + isRelease +
                ", DOC_URL=" + DOC_URL +
                ", versionExtraNumber=" + versionExtraNumber +
                '}';
    }
}


//String snapshotUrl="unDefine"
//String mavenLocal="unDefine"
//String snapshot="unDefine"
//String mavenVersion="unDefine"
//String releaseUrl="unDefine"
//String mavenArtifactId="unDefine"
//String mavenGroupId="unDefine"
//String repositoryUrl="unDefine"
//def isRelease="true"
//def MAVEN_NAME
//def MAVEN_PASSWORD
//def DOC_URL
//File maven_push = project.file('upload_config.properties')




uploadArchives {
    group getProperty("taskGroup")

    doFirst {

        def mp = new MavenPush(project)
        mp.parseUploadConfig()

        repositories {

            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                pom.version = mp.mavenVersion
                pom.artifactId = mp.mavenArtifactId
                pom.groupId = mp.mavenGroupId
                repository(url: mp.repositoryUrl) {
                    authentication(userName: mp.MAVEN_NAME, password: mp.MAVEN_PASSWORD)
// maven授权信息
                }
            }
        }

        // 进行行数字签名
        signing {
            // 当发布版本 & 存在"uploadArchives"任务时，才执 行行
            required { gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }

       // println("uploadArchives entity is : "+mp.toString())
        println("任务：uploadArchives 完成 !!!! "+"path: "+mp.repositoryUrl+",maven: "+mp.mavenGroupId+":"+mp.mavenArtifactId+":"+mp.mavenVersion)
    }


}



task generateMavenProperties{
    group getProperty("taskGroup")
    doFirst {
        File cacheFile = new File(project.projectDir,".cache.properties")
        java.util.Properties cp = new Properties()
        if(!cacheFile.exists()) {
            //throw new RuntimeException(".cache.properties 不存在")
            cacheFile.createNewFile()
            cp.put("mavenGroupId", "huan.tvkit")
            cp.put("mavenVersion", "1.0.0")
            cp.put("mavenArtifactId", project.name)
            cp.put("versionExtraNumber", "-1")
            savePropertiesFile(cp, cacheFile)
        }

        File file = new File(project.projectDir,"upload_config.properties")
        if(file.exists()){
            throw new RuntimeException("upload_config.properties已经存在，无需创建。如有需要可执行Task:deleteMavenProperties删除后重试！")
        }



        java.util.Properties p = new Properties()
        p.setMetaClass()
        p.put("mavenGroupId","huan.tvkit")
        p.put("mavenVersion","1.0.0")
        p.put("mavenArtifactId",project.name)
        p.put("snapshot","true")
        p.put("mavenLocal","true")
        p.put("snapshotUrl",'https://repo.rdc.aliyun.com/repository/75985-snapshot-mjPaUI')
        p.put("releaseUrl","https://repo.rdc.aliyun.com/repository/75985-release-JA32uh")
        println("generateMavenProperties Properties : "+p)
        println("generateMavenProperties file path is "+file)
        file.createNewFile()




        exe('git add '+file.absolutePath)
        exe('git add '+cacheFile.absolutePath)
        savePropertiesFile(p,file)
    }

}


task generateInternalProperties{
    group getProperty("taskGroup")
    doFirst {
        File file = new File(project.projectDir,".cache.properties")
        if(file.exists()){
            //throw new RuntimeException("upload_config.properties已经存在，无需创建。如有需要可执行Task:deleteMavenProperties删除后重试！")
            return
        }

        java.util.Properties p = new Properties()
        p.setMetaClass()
        p.put("mavenVersion","1.0.0")
        p.put("snapshot","true")
        p.put("mavenLocal","true")
        println("generateInternalProperties Properties : "+p)
        println("generateInternalProperties file path is "+file)
        file.createNewFile()

        exe('git add '+file.absolutePath)
        savePropertiesFile(p,file)
    }

}

//task mavenApplyProperties{
//    group getProperty("taskGroup")
//    doFirst {
//        File gradleFile =  new File(project.projectDir,"gradle.properties")
//        if(!gradleFile.exists()){
//            gradleFile.createNewFile()
//            exe('git add '+gradleFile.absolutePath)
//        }
//        File mavenFile = new File(project.projectDir,"upload_config.properties")
//        Properties mavenProperties = loadProperties(mavenFile)
//        Properties gradleProperties = loadProperties(gradleFile)
//        println("gradleProperties is "+gradleProperties)
//        Properties mergedProperties = new Properties()
//        println("mavenProperties is "+mavenProperties)
//        gradleProperties.stringPropertyNames().each {
//            mergedProperties.put(it,gradleProperties.get(it))
//        }
//
//        def commitCount = exe('git rev-list HEAD --count')
//        boolean isSnapshot = mavenProperties.getProperty("snapshot") == "true"
//        def customVersion = mavenProperties.getProperty("mavenVersion")
//        if(isSnapshot){
//            def newVersion = buildVersionByPost(customVersion+".0",commitCount)
//            newVersion+= "-SNAPSHOT"
//            mergedProperties.setProperty("version",newVersion)
//        }else{
//            mergedProperties.setProperty("version",customVersion)
//        }
//        mergedProperties.setProperty("group",mavenProperties.getProperty("mavenGroupId"))
//        mergedProperties.setProperty("name",mavenProperties.getProperty("mavenArtifactId"))
//
//        savePropertiesFile(mergedProperties,gradleFile)
//    }
//
//}

task deleteMavenProperties(type : Delete){
    group getProperty("taskGroup")
    delete project.projectDir.absolutePath+'/upload_config.properties'
}

//snapshotUrl=http\://192.168.10.9\:8081/repository/maven-snapshots/
//mavenLocal=true
//snapshot=true
//mavenVersion=1.0.2
//releaseUrl=http\://192.168.10.9\:8081/repository/maven-releases/
//mavenArtifactId=script
//mavenGroupId=huan.tvkit

def savePropertiesFile(Properties p,File file){

    FileOutputStream outputStream = new FileOutputStream(file,false)

    StringBuilder sb = new StringBuilder()
    sb.append("Aoto generated by mavenGenerateProperties task")
    //TODO 添加注释

    p.store(outputStream,sb.toString())

}

class updateUploadConfig extends DefaultTask{
    boolean release = false
    boolean mavenLocal = true
    boolean updateGradleProperty = true
    boolean devMode = false

    @Optional
    boolean getRelease() {
        return release
    }

    void setRelease(boolean release) {
        this.release = release
    }

    void setDevMode(boolean dev){
        this.devMode = dev
    }

    @Optional
    boolean getMavenLocal() {
        return mavenLocal
    }

    void setMavenLocal(boolean mavenLocal) {
        this.mavenLocal = mavenLocal
    }

    def savePropertiesFile(Properties p,File file){

        FileOutputStream outputStream = new FileOutputStream(file,false)

        StringBuilder sb = new StringBuilder()
        sb.append("Aoto generated by mavenGenerateProperties task")
        //TODO 添加注释

        p.store(outputStream,sb.toString())

    }


    Properties loadProperties(File file){
        FileInputStream inputStream = new FileInputStream(file)
        java.util.Properties p = new Properties()
        p.load(inputStream)
        return p
    }

    @TaskAction
    void work(){
        Properties uploadProperties = new Properties()
        File ff = new File(project.projectDir,"upload_config.properties")

        uploadProperties.load(new FileInputStream(ff))


        File file = new File(project.projectDir,".cache.properties")
        java.util.Properties p = new Properties()
        if(!file.exists()){
            //throw new RuntimeException(".cache.properties 不存在")
            file.createNewFile()
            p.put("mavenGroupId", "huan.tvkit")
            p.put("mavenVersion", "1.0.0")
            p.put("mavenArtifactId", project.name)
            p.put("versionExtraNumber", "-1")
            savePropertiesFile(p, file)
        }else {
            p.load(new FileInputStream(file))
        }


        p.setProperty("snapshot",release ? "false " : "true")
        p.setProperty("mavenLocal",mavenLocal ? "true" : "false")
        p.setProperty("devMode",devMode ? "true" : "false")

        int versionExtraNumber = Integer.parseInt(p.getProperty("versionExtraNumber"))
        if(versionExtraNumber > 0 && mavenLocal){
            p.setProperty("versionExtraNumber",versionExtraNumber+1+"")
        }

        if(updateGradleProperty){
            def mavenPush = new MavenPush(project)
            mavenPush.parseUploadConfig()
            p.setProperty("mavenGroupId",mavenPush.mavenGroupId)
            p.setProperty("mavenVersion",devMode ? "1.0-DEVLOCAL" : mavenPush.mavenVersion)
            p.setProperty("mavenArtifactId",mavenPush.mavenArtifactId)
        }

        savePropertiesFile(p,file)
    }



    @Override
    public String toString() {
        return "updateUploadConfig{" +
                "release=" + release +
                ", mavenLocal=" + mavenLocal +
                '}'
    }
}

task updateUploadConfigRelease(type : updateUploadConfig){
    group getProperty("taskGroup")
    release true
    mavenLocal false
    doLast{
        System.out.println("任务：updateUploadConfigRelease 完成!")
    }
}

task updateUploadConfigSnapshot(type : updateUploadConfig){
    group getProperty("taskGroup")
    release false
    mavenLocal false

    doLast{
        System.out.println("任务：updateUploadConfigSnapshot 完成!")

    }
}

task updateUploadConfigSnapshotMavenLocal(type : updateUploadConfig){
    group getProperty("taskGroup")
    release false
    mavenLocal true
    doLast{
        System.out.println("任务：updateUploadConfigSnapshotMavenLocal 完成!")
    }
}

task updateUploadConfigDevModeLocal(type : updateUploadConfig){
    group getProperty("taskGroup")
    release false
    mavenLocal true
    devMode true
    doLast{
        System.out.println("任务：updateUploadConfigSnapshotMavenLocal 完成!")
    }
}